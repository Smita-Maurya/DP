class Solution {
public:
int helper(int n ,vector<int>& days, vector<int>& costs,int i , vector<int>&dp ){
    if(i>=n){
        return 0;
    }
    if(dp[i]!=-1){
        return dp[i];
    }
     
    int pick1= costs[0] + helper(n, days  , costs , i+1 , dp);
    int j;
    for( j=i ; j<n && days[j]<days[i]+7 ; j++);
    int pick7=costs[1] + helper(n , days , costs , j ,dp);

    for(  j=i ; j<n && days[j]<days[i]+30 ; j++);
    int pick30=costs[2] + helper(n , days , costs , j,dp );

    return dp[i] = min(pick1 , min(pick7  , pick30));

}
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        int n=days.size();
        vector<int>dp(n+1 , -1);

        return helper(n , days , costs , 0 , dp);
    }
};
