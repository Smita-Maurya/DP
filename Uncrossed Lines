class Solution {
public:
int helper(vector<int>v1 , vector<int>v2 , int n , int m){
    if(n==0 || m==0){
        return 0;
    }
    if(v1[n-1]==v2[m-1]){
        return helper(v1 , v2 ,n-1 , m-1);
    }
    else{
        return max(helper(v1 , v2 ,n-1 , m) , helper(v1 , v2 ,n , m-1));
    }
}
    int maxUncrossedLines(vector<int>& nums1, vector<int>& nums2) {
      int n=nums1.size();
      int m=nums2.size();
      int dp[n+1][m+1];
      for(int i=0; i<=n ; i++){
          dp[i][0]=0;
      }  
      for(int j=0; j<=m ; j++){
          dp[0][j]=0;
      }
      for(int i=1; i<=n ; i++){
          for(int j=1; j<=m ; j++){
              if(nums1[i-1]==nums2[j-1]){
                  dp[i][j]= 1+dp[i-1][j-1];
              }
              else{
                  int a=dp[i-1][j-1];
                  int b=dp[i-1][j];
                  int c=dp[i][j-1];
                  dp[i][j]= max( a ,max(b,c));
              }
          }
      }
      return dp[n][m];
    }
};
