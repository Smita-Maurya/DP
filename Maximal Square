class Solution {
public:
int helper(vector<vector<char>>& mat  , int i , int j ,int &maxi, vector<vector<int>>&dp){
     int n=mat.size();
    int m=mat[0].size();
    if(i>=n  || j>=m){
        return 0;
    }
    
     if(dp[i][j]!=-1){
        return dp[i][j];
    }
    int right=helper(mat , i , j+1 ,maxi , dp);
    int down=helper(mat , i+1 , j ,maxi, dp);
    int dia=helper(mat , i+1 , j+1 ,maxi, dp);
    if(mat[i][j]=='1'){
      dp[i][j]=1+min(right , min(down , dia));
      maxi =max(maxi ,dp[i][j]);
      return dp[i][j];
      
    }
    else{
        return dp[i][j]=0;
    }

}
    int maximalSquare(vector<vector<char>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        int maxi=0;
        vector<vector<int>> dp(n , vector<int>(m , -1));
         
         helper(matrix , 0 , 0 ,maxi ,dp);
         return maxi*maxi;
    }
};
