class Solution {
public:
int helper(int i , int n , vector<int>&prices , int k , vector<vector<int>>&dp){
    if(i>=n){
        return 0;

    }
    if(dp[i][k]!=-1){
        return dp[i][k];
    }
    int ans=helper(i+1 , n ,prices ,k , dp);
    int ans2=0;
    if(k){
        ans2=-prices[i] +helper(i+1 , n , prices , 0 , dp);
    }
    else{
        ans2=prices[i] + helper(i+2 , n , prices , 1 , dp);
    }
    return dp[i][k]=max(ans , ans2);
}
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>>dp(n+1 , vector<int>(2 , -1));
         int ans=helper(0 , n , prices , 1 , dp);

        
        return ans;
    }
};
