class Solution {
public:
int helper(int target , vector<int>&nums , vector<int>&dp){
    int n=nums.size(); 
    if(target<0){
        return 0;
    } 
    if(target==0){
        return 1;
    }
    if(dp[target]!=-1){
        return dp[target];
    }
    //int nottake=helper(target , nums , n-1 , dp);
    int take=0;
    for(int i=0 ; i<n ; i++){
        take+=helper(target-nums[i] , nums  , dp);
    }
    dp[target]=take;
    return dp[target];
}
    int combinationSum4(vector<int>& nums, int target) {
        int n=nums.size();
        vector<int>dp(target+1 , -1);
        return helper(target , nums  , dp);
    }
};
