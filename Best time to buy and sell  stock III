class Solution {
public:
int helper(int i , int buy ,vector<int>&prices ,int limit , vector<vector<vector<int>>>&dp){
    int n=prices.size();
    if(i>=n){
        return 0;
    }
    if(limit==0){
        return 0;
    }
    if(dp[i][buy][limit]!=-1){
        return dp[i][buy][limit];
    }
    int profit=0;
    if(buy){
        int dobuy= -prices[i]+helper(i+1 ,0 ,prices ,limit, dp);
        int skip = 0+helper(i+1 , 1, prices , limit, dp);
        profit=max(dobuy , skip);
    }
    else{
        int sell=prices[i]+ helper(i+1,1,prices , limit-1,dp);
        int skip= 0+helper(i+1 , 0,prices , limit , dp);
        profit=max(sell , skip);
    }
    return dp[i][buy][limit]=profit;
}
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>>dp(n , vector<vector<int>>(2 , vector<int>(3,-1)));
        return helper(0 , 1 , prices , 2 ,dp);
    }
};
